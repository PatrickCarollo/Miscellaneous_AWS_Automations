#deployed at microserviceSetup_provisions.py script 
AWSTemplateFormatVersion: 2010-09-09
Parameters:
    projectid:
        Type: String

Resources:
###Begin microservice application infrastructure setup

    ApplicationBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Join
                - ''
                -   - 'application-user-data-'
                    - !Ref projectid
            BucketEncryption: 
                ServerSideEncryptionConfiguration:
                    -   ServerSideEncryptionByDefault:
                            SSEAlgorithm: aws:kms 
                            KMSMasterKeyID: alias/aws/s3
        
    Useritemtable:
        Type: AWS::DynamoDB::Table
        Properties:
            ProvisionedThroughput: 
                ReadCapacityUnits: '3'
                WriteCapacityUnits: '3'
            AttributeDefinitions:
                -   
                    AttributeName: 'id'
                    AttributeType: S
                -   
                    AttributeName: 'ItemCategory'
                    AttributeType: S
                -   
                    AttributeName: 'name-upc'
                    AttributeType: S
                -   
                    AttributeName: 'user'
                    AttributeType: S
            KeySchema: 
                -   
                    AttributeName: 'id'
                    KeyType: HASH
                -   
                    AttributeName: 'ItemCategory'
                    KeyType: RANGE
            GlobalSecondaryIndexes: 
                - 
                    IndexName: 'name-upc'
                    KeySchema: 
                        - 
                            AttributeName: 'name-upc'
                            KeyType: 'HASH'
                        - 
                            AttributeName: 'user'
                            KeyType: "RANGE"
                    Projection: 
                        NonKeyAttributes: 
                            - 'id'
                            - 'ItemCategory'
                        ProjectionType: 'INCLUDE'
                    ProvisionedThroughput: 
                        ReadCapacityUnits: '3'
                        WriteCapacityUnits: '3'
    #Lambda application
    Microservicefunction:
        Type: AWS::Lambda::Function
        Properties: 
            FunctionName: 'MainAppFunction'
            Code:
                ZipFile: |
                    import boto3
                    import json
                    def lambda_handler(event, context):
                        if 'queryStringParameters' in event:
                            responseobj = {
                                'statusCode': 200,
                                'headers': {
                                    'Content-Type': 'application/json'
                                },
                                'body': json.dumps(event['queryStringParameters'])
                            }
                            result = responseobj
                        else:
                            result = 'err'
                        return result
            Role: !GetAtt Lambdaendpointrole.Arn
            Handler: app.lambda_handler
            Runtime: python3.8
            Environment:
                Variables:
                    projectid: !Ref projectid
    #Api configuration
    Restapi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            EndpointConfiguration:
                Types:
                    - REGIONAL
            Name: !Join
                - ''
                -   - 'MSApi'
                    - !Ref projectid
    Apiresource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref Restapi
            ParentId: !GetAtt Restapi.RootResourceId
            PathPart: 'resource'
        DependsOn: Restapi     

    Apimethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref Restapi
            ResourceId: !Ref Apiresource
            AuthorizationType: NONE
            MethodResponses:
                -   StatusCode: 200
                    ResponseModels:
                        application/json: Empty
            HttpMethod: POST
            Integration:
                IntegrationHttpMethod: POST
                ContentHandling: CONVERT_TO_BINARY 
                Type: AWS_PROXY
                Uri: !Sub 
                    - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaarn}/invocations'
                    - lambdaarn: !GetAtt Microservicefunction.Arn
        DependsOn: Restapi
    Deployapi:
        Type: AWS::ApiGateway::Deployment
        Properties:
            StageName: 'dev'
            RestApiId: !Ref Restapi
        DependsOn: Apimethod
    #IAM Role for core Lambda application to assume
    Lambdaendpointrole:
        Type: AWS::IAM::Role
        Properties:    
            RoleName: 'lambdaApiEndpointRole'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'lambda.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 
                                    -   'dynamodb:PutItem'
                                    -   'dynamodb:GetItem'
                                    -   'dynamodb:Query'
                                Resource: !Join
                                    - ''
                                    -   - !GetAtt Useritemtable.Arn
                                        - '/*'
                            -   Effect: Allow
                                Action: 
                                    -   'logs:CreateLogGroup'
                                    -   'logs:CreateLogStream'
                                    -   'logs:PutLogEvents'
                                Resource: '*'                       
                            -   Effect: Allow
                                Action: 
                                    -   's3:PutObject'
                                    -   's3:GetObject'
                                Resource: !Join
                                    - ''
                                    -   - !GetAtt ApplicationBucket.Arn
                                        - '/*'



###End microservice application infrastructure setup



#outputs main app function ARN
Outputs:
    AppLambda:
        Value: !GetAtt Microservicefunction.Arn
        Export:
            Name: !Sub '${AWS::StackName}-AppArn'
    
            
    
        
    
     